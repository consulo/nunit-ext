/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace org.mustbe.consulo.execution.testframework.thrift.runner
{
  public partial class TestInterface {
    public interface Iface {
      void runStarted();
      #if SILVERLIGHT
      IAsyncResult Begin_runStarted(AsyncCallback callback, object state);
      void End_runStarted(IAsyncResult asyncResult);
      #endif
      void runFinished();
      #if SILVERLIGHT
      IAsyncResult Begin_runFinished(AsyncCallback callback, object state);
      void End_runFinished(IAsyncResult asyncResult);
      #endif
      void suiteStarted(string name, string location);
      #if SILVERLIGHT
      IAsyncResult Begin_suiteStarted(AsyncCallback callback, object state, string name, string location);
      void End_suiteStarted(IAsyncResult asyncResult);
      #endif
      void suiteTestCount(int count);
      #if SILVERLIGHT
      IAsyncResult Begin_suiteTestCount(AsyncCallback callback, object state, int count);
      void End_suiteTestCount(IAsyncResult asyncResult);
      #endif
      void suiteFinished(string name);
      #if SILVERLIGHT
      IAsyncResult Begin_suiteFinished(AsyncCallback callback, object state, string name);
      void End_suiteFinished(IAsyncResult asyncResult);
      #endif
      void testStarted(string name, string location);
      #if SILVERLIGHT
      IAsyncResult Begin_testStarted(AsyncCallback callback, object state, string name, string location);
      void End_testStarted(IAsyncResult asyncResult);
      #endif
      void testFailed(string name, string message, string trace, bool testError, string actual, string expected);
      #if SILVERLIGHT
      IAsyncResult Begin_testFailed(AsyncCallback callback, object state, string name, string message, string trace, bool testError, string actual, string expected);
      void End_testFailed(IAsyncResult asyncResult);
      #endif
      void testIgnored(string name, string comment, string trace);
      #if SILVERLIGHT
      IAsyncResult Begin_testIgnored(AsyncCallback callback, object state, string name, string comment, string trace);
      void End_testIgnored(IAsyncResult asyncResult);
      #endif
      void testOutput(string name, string text, bool stdOut);
      #if SILVERLIGHT
      IAsyncResult Begin_testOutput(AsyncCallback callback, object state, string name, string text, bool stdOut);
      void End_testOutput(IAsyncResult asyncResult);
      #endif
      void testFinished(string name, long time);
      #if SILVERLIGHT
      IAsyncResult Begin_testFinished(AsyncCallback callback, object state, string name, long time);
      void End_testFinished(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_runStarted(AsyncCallback callback, object state)
      {
        return send_runStarted(callback, state);
      }

      public void End_runStarted(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_runStarted();
      }

      #endif

      public void runStarted()
      {
        #if !SILVERLIGHT
        send_runStarted();
        recv_runStarted();

        #else
        var asyncResult = Begin_runStarted(null, null);
        End_runStarted(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_runStarted(AsyncCallback callback, object state)
      #else
      public void send_runStarted()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("runStarted", TMessageType.Call, seqid_));
        runStarted_args args = new runStarted_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_runStarted()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        runStarted_result result = new runStarted_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_runFinished(AsyncCallback callback, object state)
      {
        return send_runFinished(callback, state);
      }

      public void End_runFinished(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_runFinished();
      }

      #endif

      public void runFinished()
      {
        #if !SILVERLIGHT
        send_runFinished();
        recv_runFinished();

        #else
        var asyncResult = Begin_runFinished(null, null);
        End_runFinished(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_runFinished(AsyncCallback callback, object state)
      #else
      public void send_runFinished()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("runFinished", TMessageType.Call, seqid_));
        runFinished_args args = new runFinished_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_runFinished()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        runFinished_result result = new runFinished_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_suiteStarted(AsyncCallback callback, object state, string name, string location)
      {
        return send_suiteStarted(callback, state, name, location);
      }

      public void End_suiteStarted(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_suiteStarted();
      }

      #endif

      public void suiteStarted(string name, string location)
      {
        #if !SILVERLIGHT
        send_suiteStarted(name, location);
        recv_suiteStarted();

        #else
        var asyncResult = Begin_suiteStarted(null, null, name, location);
        End_suiteStarted(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_suiteStarted(AsyncCallback callback, object state, string name, string location)
      #else
      public void send_suiteStarted(string name, string location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("suiteStarted", TMessageType.Call, seqid_));
        suiteStarted_args args = new suiteStarted_args();
        args.Name = name;
        args.Location = location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_suiteStarted()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        suiteStarted_result result = new suiteStarted_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_suiteTestCount(AsyncCallback callback, object state, int count)
      {
        return send_suiteTestCount(callback, state, count);
      }

      public void End_suiteTestCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_suiteTestCount();
      }

      #endif

      public void suiteTestCount(int count)
      {
        #if !SILVERLIGHT
        send_suiteTestCount(count);
        recv_suiteTestCount();

        #else
        var asyncResult = Begin_suiteTestCount(null, null, count);
        End_suiteTestCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_suiteTestCount(AsyncCallback callback, object state, int count)
      #else
      public void send_suiteTestCount(int count)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("suiteTestCount", TMessageType.Call, seqid_));
        suiteTestCount_args args = new suiteTestCount_args();
        args.Count = count;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_suiteTestCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        suiteTestCount_result result = new suiteTestCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_suiteFinished(AsyncCallback callback, object state, string name)
      {
        return send_suiteFinished(callback, state, name);
      }

      public void End_suiteFinished(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_suiteFinished();
      }

      #endif

      public void suiteFinished(string name)
      {
        #if !SILVERLIGHT
        send_suiteFinished(name);
        recv_suiteFinished();

        #else
        var asyncResult = Begin_suiteFinished(null, null, name);
        End_suiteFinished(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_suiteFinished(AsyncCallback callback, object state, string name)
      #else
      public void send_suiteFinished(string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("suiteFinished", TMessageType.Call, seqid_));
        suiteFinished_args args = new suiteFinished_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_suiteFinished()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        suiteFinished_result result = new suiteFinished_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testStarted(AsyncCallback callback, object state, string name, string location)
      {
        return send_testStarted(callback, state, name, location);
      }

      public void End_testStarted(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_testStarted();
      }

      #endif

      public void testStarted(string name, string location)
      {
        #if !SILVERLIGHT
        send_testStarted(name, location);
        recv_testStarted();

        #else
        var asyncResult = Begin_testStarted(null, null, name, location);
        End_testStarted(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testStarted(AsyncCallback callback, object state, string name, string location)
      #else
      public void send_testStarted(string name, string location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testStarted", TMessageType.Call, seqid_));
        testStarted_args args = new testStarted_args();
        args.Name = name;
        args.Location = location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_testStarted()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testStarted_result result = new testStarted_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testFailed(AsyncCallback callback, object state, string name, string message, string trace, bool testError, string actual, string expected)
      {
        return send_testFailed(callback, state, name, message, trace, testError, actual, expected);
      }

      public void End_testFailed(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_testFailed();
      }

      #endif

      public void testFailed(string name, string message, string trace, bool testError, string actual, string expected)
      {
        #if !SILVERLIGHT
        send_testFailed(name, message, trace, testError, actual, expected);
        recv_testFailed();

        #else
        var asyncResult = Begin_testFailed(null, null, name, message, trace, testError, actual, expected);
        End_testFailed(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testFailed(AsyncCallback callback, object state, string name, string message, string trace, bool testError, string actual, string expected)
      #else
      public void send_testFailed(string name, string message, string trace, bool testError, string actual, string expected)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testFailed", TMessageType.Call, seqid_));
        testFailed_args args = new testFailed_args();
        args.Name = name;
        args.Message = message;
        args.Trace = trace;
        args.TestError = testError;
        args.Actual = actual;
        args.Expected = expected;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_testFailed()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testFailed_result result = new testFailed_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testIgnored(AsyncCallback callback, object state, string name, string comment, string trace)
      {
        return send_testIgnored(callback, state, name, comment, trace);
      }

      public void End_testIgnored(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_testIgnored();
      }

      #endif

      public void testIgnored(string name, string comment, string trace)
      {
        #if !SILVERLIGHT
        send_testIgnored(name, comment, trace);
        recv_testIgnored();

        #else
        var asyncResult = Begin_testIgnored(null, null, name, comment, trace);
        End_testIgnored(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testIgnored(AsyncCallback callback, object state, string name, string comment, string trace)
      #else
      public void send_testIgnored(string name, string comment, string trace)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testIgnored", TMessageType.Call, seqid_));
        testIgnored_args args = new testIgnored_args();
        args.Name = name;
        args.Comment = comment;
        args.Trace = trace;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_testIgnored()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testIgnored_result result = new testIgnored_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testOutput(AsyncCallback callback, object state, string name, string text, bool stdOut)
      {
        return send_testOutput(callback, state, name, text, stdOut);
      }

      public void End_testOutput(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_testOutput();
      }

      #endif

      public void testOutput(string name, string text, bool stdOut)
      {
        #if !SILVERLIGHT
        send_testOutput(name, text, stdOut);
        recv_testOutput();

        #else
        var asyncResult = Begin_testOutput(null, null, name, text, stdOut);
        End_testOutput(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testOutput(AsyncCallback callback, object state, string name, string text, bool stdOut)
      #else
      public void send_testOutput(string name, string text, bool stdOut)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testOutput", TMessageType.Call, seqid_));
        testOutput_args args = new testOutput_args();
        args.Name = name;
        args.Text = text;
        args.StdOut = stdOut;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_testOutput()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testOutput_result result = new testOutput_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testFinished(AsyncCallback callback, object state, string name, long time)
      {
        return send_testFinished(callback, state, name, time);
      }

      public void End_testFinished(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_testFinished();
      }

      #endif

      public void testFinished(string name, long time)
      {
        #if !SILVERLIGHT
        send_testFinished(name, time);
        recv_testFinished();

        #else
        var asyncResult = Begin_testFinished(null, null, name, time);
        End_testFinished(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testFinished(AsyncCallback callback, object state, string name, long time)
      #else
      public void send_testFinished(string name, long time)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testFinished", TMessageType.Call, seqid_));
        testFinished_args args = new testFinished_args();
        args.Name = name;
        args.Time = time;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_testFinished()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testFinished_result result = new testFinished_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["runStarted"] = runStarted_Process;
        processMap_["runFinished"] = runFinished_Process;
        processMap_["suiteStarted"] = suiteStarted_Process;
        processMap_["suiteTestCount"] = suiteTestCount_Process;
        processMap_["suiteFinished"] = suiteFinished_Process;
        processMap_["testStarted"] = testStarted_Process;
        processMap_["testFailed"] = testFailed_Process;
        processMap_["testIgnored"] = testIgnored_Process;
        processMap_["testOutput"] = testOutput_Process;
        processMap_["testFinished"] = testFinished_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void runStarted_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        runStarted_args args = new runStarted_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        runStarted_result result = new runStarted_result();
        iface_.runStarted();
        oprot.WriteMessageBegin(new TMessage("runStarted", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void runFinished_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        runFinished_args args = new runFinished_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        runFinished_result result = new runFinished_result();
        iface_.runFinished();
        oprot.WriteMessageBegin(new TMessage("runFinished", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void suiteStarted_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        suiteStarted_args args = new suiteStarted_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        suiteStarted_result result = new suiteStarted_result();
        iface_.suiteStarted(args.Name, args.Location);
        oprot.WriteMessageBegin(new TMessage("suiteStarted", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void suiteTestCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        suiteTestCount_args args = new suiteTestCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        suiteTestCount_result result = new suiteTestCount_result();
        iface_.suiteTestCount(args.Count);
        oprot.WriteMessageBegin(new TMessage("suiteTestCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void suiteFinished_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        suiteFinished_args args = new suiteFinished_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        suiteFinished_result result = new suiteFinished_result();
        iface_.suiteFinished(args.Name);
        oprot.WriteMessageBegin(new TMessage("suiteFinished", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testStarted_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testStarted_args args = new testStarted_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testStarted_result result = new testStarted_result();
        iface_.testStarted(args.Name, args.Location);
        oprot.WriteMessageBegin(new TMessage("testStarted", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testFailed_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testFailed_args args = new testFailed_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testFailed_result result = new testFailed_result();
        iface_.testFailed(args.Name, args.Message, args.Trace, args.TestError, args.Actual, args.Expected);
        oprot.WriteMessageBegin(new TMessage("testFailed", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testIgnored_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testIgnored_args args = new testIgnored_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testIgnored_result result = new testIgnored_result();
        iface_.testIgnored(args.Name, args.Comment, args.Trace);
        oprot.WriteMessageBegin(new TMessage("testIgnored", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testOutput_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testOutput_args args = new testOutput_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testOutput_result result = new testOutput_result();
        iface_.testOutput(args.Name, args.Text, args.StdOut);
        oprot.WriteMessageBegin(new TMessage("testOutput", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testFinished_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testFinished_args args = new testFinished_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testFinished_result result = new testFinished_result();
        iface_.testFinished(args.Name, args.Time);
        oprot.WriteMessageBegin(new TMessage("testFinished", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class runStarted_args : TBase
    {

      public runStarted_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("runStarted_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("runStarted_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class runStarted_result : TBase
    {

      public runStarted_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("runStarted_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("runStarted_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class runFinished_args : TBase
    {

      public runFinished_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("runFinished_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("runFinished_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class runFinished_result : TBase
    {

      public runFinished_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("runFinished_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("runFinished_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class suiteStarted_args : TBase
    {
      private string _name;
      private string _location;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string Location
      {
        get
        {
          return _location;
        }
        set
        {
          __isset.location = true;
          this._location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool location;
      }

      public suiteStarted_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Location = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("suiteStarted_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Location);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("suiteStarted_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Location: ");
        sb.Append(Location);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class suiteStarted_result : TBase
    {

      public suiteStarted_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("suiteStarted_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("suiteStarted_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class suiteTestCount_args : TBase
    {
      private int _count;

      public int Count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool count;
      }

      public suiteTestCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("suiteTestCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("suiteTestCount_args(");
        sb.Append("Count: ");
        sb.Append(Count);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class suiteTestCount_result : TBase
    {

      public suiteTestCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("suiteTestCount_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("suiteTestCount_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class suiteFinished_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public suiteFinished_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("suiteFinished_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("suiteFinished_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class suiteFinished_result : TBase
    {

      public suiteFinished_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("suiteFinished_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("suiteFinished_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testStarted_args : TBase
    {
      private string _name;
      private string _location;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string Location
      {
        get
        {
          return _location;
        }
        set
        {
          __isset.location = true;
          this._location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool location;
      }

      public testStarted_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Location = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testStarted_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Location);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("testStarted_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Location: ");
        sb.Append(Location);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testStarted_result : TBase
    {

      public testStarted_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testStarted_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("testStarted_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testFailed_args : TBase
    {
      private string _name;
      private string _message;
      private string _trace;
      private bool _testError;
      private string _actual;
      private string _expected;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }

      public string Trace
      {
        get
        {
          return _trace;
        }
        set
        {
          __isset.trace = true;
          this._trace = value;
        }
      }

      public bool TestError
      {
        get
        {
          return _testError;
        }
        set
        {
          __isset.testError = true;
          this._testError = value;
        }
      }

      public string Actual
      {
        get
        {
          return _actual;
        }
        set
        {
          __isset.actual = true;
          this._actual = value;
        }
      }

      public string Expected
      {
        get
        {
          return _expected;
        }
        set
        {
          __isset.expected = true;
          this._expected = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool message;
        public bool trace;
        public bool testError;
        public bool actual;
        public bool expected;
      }

      public testFailed_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Message = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Trace = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                TestError = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Actual = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Expected = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testFailed_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Message);
          oprot.WriteFieldEnd();
        }
        if (Trace != null && __isset.trace) {
          field.Name = "trace";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Trace);
          oprot.WriteFieldEnd();
        }
        if (__isset.testError) {
          field.Name = "testError";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(TestError);
          oprot.WriteFieldEnd();
        }
        if (Actual != null && __isset.actual) {
          field.Name = "actual";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Actual);
          oprot.WriteFieldEnd();
        }
        if (Expected != null && __isset.expected) {
          field.Name = "expected";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Expected);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("testFailed_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Message: ");
        sb.Append(Message);
        sb.Append(",Trace: ");
        sb.Append(Trace);
        sb.Append(",TestError: ");
        sb.Append(TestError);
        sb.Append(",Actual: ");
        sb.Append(Actual);
        sb.Append(",Expected: ");
        sb.Append(Expected);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testFailed_result : TBase
    {

      public testFailed_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testFailed_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("testFailed_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testIgnored_args : TBase
    {
      private string _name;
      private string _comment;
      private string _trace;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string Comment
      {
        get
        {
          return _comment;
        }
        set
        {
          __isset.comment = true;
          this._comment = value;
        }
      }

      public string Trace
      {
        get
        {
          return _trace;
        }
        set
        {
          __isset.trace = true;
          this._trace = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool comment;
        public bool trace;
      }

      public testIgnored_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Trace = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testIgnored_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Comment != null && __isset.comment) {
          field.Name = "comment";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Comment);
          oprot.WriteFieldEnd();
        }
        if (Trace != null && __isset.trace) {
          field.Name = "trace";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Trace);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("testIgnored_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Comment: ");
        sb.Append(Comment);
        sb.Append(",Trace: ");
        sb.Append(Trace);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testIgnored_result : TBase
    {

      public testIgnored_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testIgnored_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("testIgnored_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testOutput_args : TBase
    {
      private string _name;
      private string _text;
      private bool _stdOut;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string Text
      {
        get
        {
          return _text;
        }
        set
        {
          __isset.text = true;
          this._text = value;
        }
      }

      public bool StdOut
      {
        get
        {
          return _stdOut;
        }
        set
        {
          __isset.stdOut = true;
          this._stdOut = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool text;
        public bool stdOut;
      }

      public testOutput_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Text = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                StdOut = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testOutput_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Text != null && __isset.text) {
          field.Name = "text";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Text);
          oprot.WriteFieldEnd();
        }
        if (__isset.stdOut) {
          field.Name = "stdOut";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(StdOut);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("testOutput_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Text: ");
        sb.Append(Text);
        sb.Append(",StdOut: ");
        sb.Append(StdOut);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testOutput_result : TBase
    {

      public testOutput_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testOutput_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("testOutput_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testFinished_args : TBase
    {
      private string _name;
      private long _time;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public long Time
      {
        get
        {
          return _time;
        }
        set
        {
          __isset.time = true;
          this._time = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool time;
      }

      public testFinished_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Time = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testFinished_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.time) {
          field.Name = "time";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Time);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("testFinished_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Time: ");
        sb.Append(Time);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testFinished_result : TBase
    {

      public testFinished_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testFinished_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("testFinished_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
